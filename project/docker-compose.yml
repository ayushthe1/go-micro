version:  '3'

services:

  broker-service:
  # build section specifies how to build the container image for the service.
    build:
      # specifies the build context directory,where the build process should look for files to include in the container image.
      context:  ./../broker-service
      # specifies the path to the Dockerfile that will be used to build the image
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    ports:
    # map port 8080 on my localhost to port 8084 on the docker image
    # we should be able to hit the broker service on port 8080 from my front-end (or we can hit the broker-service on localhost:8080 on postman to check its response as all traffic on localhost:8080 is forwarded to port 8084 of container broker-service)
    # 8084 bcoz in broker-service/main.go ,we have configured broker service to listen on port 8084.So it will listen on port 8084 inside the container.
      - "8080:8084"
    # The deploy section contains configuration options for deploying the service to a swarm cluster (Docker's native orchestration and clustering solution).
    deploy:
      mode: replicated
      # we can only have 1 replica in this case bcoz we can't listen to 2 docker images on port 8080 on localhost
      replicas: 1


  # Add the authentication service
  authentication-service:
    build: 
    # The context field determines the directory path where the build context resides. The build context is the set of files and directories that are sent to the Docker daemon for building the Docker image of the service. It includes the Dockerfile and any files referenced by the Dockerfile during the build process.
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart: always
    ports: 
      - "8081:8084"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"
    



  # Add a Postegres service
  postgres:
    image: 'postgres:14.2'
    ports:
      - "5432:5432" # map port 5444 on my local machine to 5432 on my docker container
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:   # volumes so that the data persists
      - ./db-data/postgres/:/var/lib/postgresql/data/
